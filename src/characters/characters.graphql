type Character {
  id: ID!
  name: String!
  species: String
  gender: Gender
  height: Float
  weight: Int
  homeworld: Planet
  description: String
}

enum Gender {
  MALE
  FEMALE
}

input CreateCharacterInput {
  name: String!
  species: String
  gender: String
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

input UpdateCharacterInput {
  id: ID!
  name: String
  species: String
  gender: String
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

type CharacterPayload {
  id: ID
  name: String
  species: String
  gender: Gender
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

type Query {
  characters: [Character]!
  character(id: ID!): Character
}

type Mutation {
  createCharacter(createCharacterInput: CreateCharacterInput!): CharacterPayload!
  updateCharacter(updateCharacterInput: UpdateCharacterInput!): CharacterPayload!
  removeCharacter(id: ID!): Character
}
