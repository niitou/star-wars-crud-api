type Character {
  id: ID!
  name: String!
  species: String
  gender: Gender
  height: Float
  weight: Int
  homeworld: Planet
  description: String
}

enum Gender {
  MALE
  FEMALE
}

type PaginatedCharacters {
  characters: [Character!]!
  count: Int!
  pageInfo: PageInfo!
}

input CreateCharacterInput {
  name: String!
  species: String
  gender: String
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

input UpdateCharacterInput {
  id: ID!
  name: String
  species: String
  gender: String
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

type CharacterPayload {
  id: ID
  name: String
  species: String
  gender: Gender
  height: Float
  weight: Int
  homeworld: ID
  description: String
}

type PageInfo{
  page: Int
  hasNext: Boolean
  hasPrevious: Boolean
}

type Query {
  characters: [Character]!
  character(id: ID!): Character
  paginatedCharacters(page: Int = 1, limit: Int = 10) : PaginatedCharacters! 
}

type Mutation {
  createCharacter(createCharacterInput: CreateCharacterInput!): CharacterPayload!
  updateCharacter(updateCharacterInput: UpdateCharacterInput!): CharacterPayload!
  removeCharacter(id: ID!): Character
}
